apiVersion: v1
kind: PersistentVolume
metadata:
  name: moviebets-postgres-pv
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  awsElasticBlockStore:
    volumeID: vol-06b9132eaa8482374
    fsType: ext4

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: moviebets-postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: moviebets-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: moviebets-postgres
  template:
    metadata:
      labels:
        app: moviebets-postgres
    spec:
      imagePullSecrets:
        - name: image-pull-secret
      initContainers:
        - name: format-and-resize-filesystem
          image: alpine
          command:
            - sh
            - -c
            - |
              apk add --no-cache e2fsprogs && \
              # Check if /var/lib/postgresql/data is already formatted
              if ! blkid /var/lib/postgresql/data >/dev/null 2>&1; then
                echo "Filesystem not found, formatting..."
                mkfs.ext4 /var/lib/postgresql/data || echo "Formatting failed"
              else
                echo "Filesystem exists, skipping format"
              fi && \
              resize2fs /var/lib/postgresql/data || echo "Resize failed or not needed"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      containers:
        - env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: dbpass
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            - name: PGTZ
              value: "Europe/Amsterdam"
            - name: BET_DB_USER
              value: "bettingdbuser"
            - name: BET_DB_PASSWORD
              value: "dbpass"
            - name: BET_DB_NAME
              value: "bettingdb"
            - name: CUSTOMER_DB_USER
              value: "customerdbuser"
            - name: CUSTOMER_DB_PASSWORD
              value: "dbpass"
            - name: CUSTOMER_DB_NAME
              value: "customerdb"
            - name: MARKET_DB_USER
              value: "marketdbuser"
            - name: MARKET_DB_PASSWORD
              value: "dbpass"
            - name: MARKET_DB_NAME
              value: "marketdb"
          image: ghcr.io/skyglass/movie-bets/moviebets-postgres:17.2
          name: moviebets-postgres
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data  # Default data path for PostgreSQL
          resources: {}
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
      restartPolicy: Always
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: moviebets-postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: moviebets-postgres
spec:
  selector:
    app: moviebets-postgres
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  type: ClusterIP